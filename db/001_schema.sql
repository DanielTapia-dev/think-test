BEGIN;
  
CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE TABLE IF NOT EXISTS Empleado (
  ID              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  FECHA_INGRESO   DATE        NOT NULL,
  NOMBRE          VARCHAR(50) NOT NULL,
  SALARIO         NUMERIC(10,2)
);

CREATE TABLE IF NOT EXISTS Solicitud (
  ID            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  CODIGO        VARCHAR(50) NOT NULL,
  DESCRIPCION   VARCHAR(50),
  RESUMEN       VARCHAR(50),
  ID_EMPLEADO   BIGINT      NOT NULL,
  CONSTRAINT fk_solicitud_empleado
    FOREIGN KEY (ID_EMPLEADO)
    REFERENCES Empleado(ID)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_solicitud_id_empleado ON Solicitud(ID_EMPLEADO);

CREATE TABLE IF NOT EXISTS "user" (
  id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email          VARCHAR(255) NOT NULL UNIQUE,
  username       VARCHAR(50) UNIQUE,
  password_hash  TEXT NOT NULL,
  is_active      BOOLEAN NOT NULL DEFAULT TRUE,
  empleado_id    BIGINT NULL,
  created_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT fk_user_empleado
    FOREIGN KEY (empleado_id) REFERENCES Empleado(ID)
      ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS role (
  id    SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code  VARCHAR(50) NOT NULL UNIQUE,
  name  VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS user_role (
  user_id BIGINT NOT NULL,
  role_id SMALLINT NOT NULL,
  PRIMARY KEY (user_id, role_id),
  FOREIGN KEY (user_id) REFERENCES "user"(id) ON DELETE CASCADE,
  FOREIGN KEY (role_id) REFERENCES role(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS refresh_token (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      BIGINT NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
  token_hash   TEXT NOT NULL,
  user_agent   TEXT,
  ip_address   INET,
  expires_at   TIMESTAMPTZ NOT NULL,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  revoked_at   TIMESTAMPTZ
);

CREATE INDEX IF NOT EXISTS idx_user_email ON "user"(email);
CREATE INDEX IF NOT EXISTS idx_refresh_user_expires ON refresh_token(user_id, expires_at);

INSERT INTO Empleado (FECHA_INGRESO, NOMBRE, SALARIO)
SELECT CURRENT_DATE, 'Jorge Luna', 1200.00
WHERE NOT EXISTS (SELECT 1 FROM Empleado);

INSERT INTO role (code, name) VALUES
  ('ADMIN', 'Administrator'),
  ('USER',  'Standard User')
ON CONFLICT (code) DO NOTHING;

DO $$
BEGIN
  RAISE NOTICE 'Seed de usuario admin: iniciando';

  IF NOT EXISTS (SELECT 1 FROM "user" WHERE email = 'admin@test.com') THEN
    INSERT INTO "user" (email, username, password_hash, is_active, empleado_id)
    VALUES (
      'admin@test.com',
      'admin',
      crypt('Admin1234!', gen_salt('bf', 12)),
      TRUE,
      (SELECT ID FROM Empleado ORDER BY ID LIMIT 1)
    );

    RAISE NOTICE 'Seed de usuario admin: insert realizado';
  ELSE
    RAISE NOTICE 'Seed de usuario admin: ya exist√≠a, no se inserta';
  END IF;
END $$;

INSERT INTO user_role (user_id, role_id)
SELECT u.id, r.id
FROM "user" u
JOIN role r ON r.code = 'ADMIN'
WHERE u.email = 'admin@test.com'
ON CONFLICT DO NOTHING;

INSERT INTO Solicitud (CODIGO, DESCRIPCION, RESUMEN, ID_EMPLEADO)
SELECT 'SOL-001', 'Primera solicitud', 'Resumen demo', e.ID
FROM Empleado e
WHERE e.NOMBRE = 'Empleado Demo'
  AND NOT EXISTS (SELECT 1 FROM Solicitud);

COMMIT;